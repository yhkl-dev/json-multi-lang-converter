// export function jsonToGoStruct(jsonStr: string): string {
//  const obj = JSON.parse(jsonStr);
//   let goStruct = "type AutoGenerated struct {\n";

//   const parseObject = (obj, indent = "  ") => {
//     let result = "";
//     Object.keys(obj).forEach(key => {
//       const value = obj[key];
//       const goType = getGoType(value, indent + "  ");
//       result += `${indent}${formatGoKey(key)} ${goType}\n`;
//     });
//     return result;
//   };

//   const getGoType = (value, indent) => {
//     if (Array.isArray(value)) {
//       if (value.length === 0) {
//         return "[]interface{}";
//       }
//       return "[]" + getGoType(value[0], indent);
//     } else if (typeof value === "object" && value !== null) {
//       return `struct {\n${parseObject(value, indent)}${indent.slice(2)}}`;
//     } else if (typeof value === "string") {
//       return "string";
//     } else if (typeof value === "number") {
//       return Number.isInteger(value) ? "int" : "float64";
//     } else if (typeof value === "boolean") {
//       return "bool";
//     } else {
//       return "interface{}";
//     }
//   };

//   const formatGoKey = (key) => {
//     return key.replace(/(?:^\w|[A-Z]|\b\w)/g, (word, index) => {
//       return index === 0 ? word.toUpperCase() : word.toLowerCase();
//     }).replace(/\s+/g, '');
//   };

//   goStruct += parseObject(obj) + "}";
//   return goStruct;
// }

export function jsonToGoStruct(jsonStr: string): string {
  const obj = JSON.parse(jsonStr);
  let goStruct = "type AutoGenerated struct {\n";

  const parseObject = (obj, indent = "  ") => {
    let result = "";
    Object.keys(obj).forEach(key => {
      const value = obj[key];
      const goType = getGoType(value, indent + "  ");
      result += `${indent}${formatGoKey(key)} ${goType}\n`;
    });
    return result;
  };

  const getGoType = (value, indent) => {
    if (Array.isArray(value)) {
      if (value.length === 0) {
        return "[]interface{}";
      }
      return "[]" + getGoType(value[0], indent);
    } else if (typeof value === "object" && value !== null) {
      if (value instanceof Date) {
        return "time.Time";
      } else if (Object.keys(value).length === 0) {
        return "map[string]interface{}";
      } else {
        return `struct {\n${parseObject(value, indent)}${indent.slice(2)}}`;
      }
    } else if (typeof value === "string") {
      return "string";
    } else if (typeof value === "number") {
      // 更细致的处理数字类型
      if (Number.isInteger(value)) {
        if (value >= -128 && value <= 127) {
          return "int8";
        } else if (value >= -32768 && value <= 32767) {
          return "int16";
        } else if (value >= -2147483648 && value <= 2147483647) {
          return "int32";
        } else {
          return "int64";
        }
      } else {
        // 处理浮点数
        return "float64";
      }
    } else if (typeof value === "boolean") {
      return "bool";
    } else {
      return "interface{}";
    }
  };

  const formatGoKey = (key) => {
    return key.replace(/(?:^\w|[A-Z]|\b\w)/g, (word, index) => {
      return index === 0 ? word.toUpperCase() : word.toLowerCase();
    }).replace(/\s+/g, '');
  };

  goStruct += parseObject(obj) + "}";
  return goStruct;
}